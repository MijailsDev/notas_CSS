/* h1:hover{
    color: red;
    cursor: pointer;
} */

/* 
Las pseudoclases son selectores dinamicas o contextuales. 
Esto siginfica que su comportamiento va a depender de las 
circunstancias.

La notacion es con dos puntos (:)

*/



/* cuando quieres hacer un hover a un hijo de H1 */
h1 :hover{   /* El espacio vacio significa selector descendiente */
    color: red;
    cursor: pointer;
}


/* 
Pseudoclases :hover :active :visited 

*/

a{
    color: red;
    text-decoration: none;
}

a:hover{
    text-decoration: underline;
    color: green;
    /* transition: all 1s;
    margin-left: 50px; */
}

a:active{
    /* El momento en que se da click */
    background: yellow;

}

a:visited{
    color: sienna;
}

body{
    background: rgb(161, 161, 161);
}

/*  Pseudoclases :arget :not :empty */

/*      :targer selecciona el destino de un enlace */
h2{
    display: inline;
}

p{
    display: none;
}
p:target{
    display: block;
}

/*      :not() selecciona a los elementos que no cumplan 
               con la condicion */

.box {
    display: inline-block;
    background: red;
    margin: 1em;
    /* width: 100px;
    height: 100px; */
    padding: 2em;
    border-radius: 20px;
}        

.container:hover .box:not(:hover){
    opacity: .3;
}

/*  : empty  */

.box:empty{
    display: none;
}

/* Pseudoclases de formularios */

:required{
    border: 1px solid red;
}

:checked{
    box-shadow: 2px 2px 5px;
}

:focus{
    outline: 4px solid green;
    border-color: transparent;
}


/* Psudoclases :is y :where */

ul :is(a,li,span){
    color:red;
}

h1 a,
li a,
span a {
    color: red;
}

:is(h1,li,span) a {
    color: red;
}
/* Diferencia entre is y where
        :is tiene mas especificidad
        :where siempre tiene especificidad de cero */









/* 
    Seleccionar elementos por su posicion respecto
    a sus hermanos
*/

.container{
    text-align: center;
    padding-top: 3em;
}
.item{
    width: 60px;
    height: 60px;
    display: inline-block;
    background-color: purple;
    color: white;
    line-height: 60px;
    margin: 10px 5px;
}
        

/* 
    :first-child    :last-child

    busca por el selector 
*/

.item:first-child{
    /* background: green; */
}

.item:last-child{
    /* background: orange; */
}

/* 
    nth-of-type   nth-last-of-type 

    busca por el elemento HTML
*/

.container div:first-of-type{
    /* background: red; */
}


/* 
    nth-child() nth-of-type()   
    nth-last-child() nth-last-of-type()

    El parametro es del tipo (An+B [of S]

 */


 
 /* 
    El parametro mas sencillo es even(par) y 
    odd(impar)
 */

 .item:nth-child(odd){
    /* background: red; */
 }

 /* 
    Podemos usar un numero especifico
 */
.item:nth-child(10){
    /* background: green; */
}

/* 
    Podemos usar un multiplo
*/
.item:nth-child(3n){
    /* background: red; */
}

/* 
    Podemos usar  una ecuacion sumando o restando
    un numero al multiplo
    IMPORTANTE: n simpre comienza en 0
*/
.item:nth-child(3n + 1){
    /* background: red; */
}

.item:nth-last-child(-n + 5){
    /* Selecciona los ultimos 5 elementos */
    /* background: green; */
}

.item:nth-child(n+7){
    /* Selecciona todos los elememntos los primeros 7 */
    /* background: red; */
}

.item:nth-last-child(n+7){
    /* Selecciona todos los elementos excepto los ultimos 7 */
    /* background: green; */
}

.item:nth-child(even).item:nth-child(-n+8){
    /* background: red; */
}

.item:nth-of-type(3n){
    /* background: red; */
}

.item:nth-child(even of div){
    background: red;
}